package battle;

import model.Droid;
import java.util.List;
import java.util.Random;

public class TeamBattle {
    private static final Random random = new Random();
    private BattleLogger logger;

    public TeamBattle() {
        this.logger = new BattleLogger();
    }

    public BattleLogger startBattle(List<Droid> team1, List<Droid> team2) {
        logger.clear();
        logger.log("–ë–Ü–ô –ö–û–ú–ê–ù–î–ê –ù–ê –ö–û–ú–ê–ù–î–£:");
        logger.log("–ö–æ–º–∞–Ω–¥–∞ 1:");
        for (Droid d : team1) {
            logger.log("  " + d.toString());
        }
        logger.log("\n–ö–æ–º–∞–Ω–¥–∞ 2:");
        for (Droid d : team2) {
            logger.log("  " + d.toString());
        }

        int round = 1;
        while (hasAliveDroids(team1) && hasAliveDroids(team2)) {
            logger.log("--- –†–∞—É–Ω–¥ " + round + " ---");

            // –ö–æ–º–∞–Ω–¥–∞ 1 –∞—Ç–∞–∫—É—î
            Droid attacker1 = getRandomAliveDroid(team1);
            Droid target1 = getRandomAliveDroid(team2);

            if (attacker1 != null && target1 != null) {
                int damage = attacker1.attack();
                target1.takeDamage(damage);
                logger.log(attacker1.getName() + " (–ö–æ–º–∞–Ω–¥–∞ 1) –∞—Ç–∞–∫—É—î " +
                        target1.getName() + " (–ö–æ–º–∞–Ω–¥–∞ 2) —ñ –Ω–∞–Ω–æ—Å–∏—Ç—å " + damage + " —à–∫–æ–¥–∏");
                logger.log(target1.getName() + " HP: " + target1.getHealth() + "/" + target1.getMaxHealth());

                if (!target1.isAlive()) {
                    logger.log(target1.getName() + " –∑–Ω–∏—â–µ–Ω–∏–π!");
                }
            }

            if (!hasAliveDroids(team2)) {
                logger.log("\nüèÜ –ü–µ—Ä–µ–º–æ–≥–ª–∞ –ö–æ–º–∞–Ω–¥–∞ 1!");
                break;
            }

            logger.log("");

            // –ö–æ–º–∞–Ω–¥–∞ 2 –∞—Ç–∞–∫—É—î
            Droid attacker2 = getRandomAliveDroid(team2);
            Droid target2 = getRandomAliveDroid(team1);

            if (attacker2 != null && target2 != null) {
                int damage = attacker2.attack();
                target2.takeDamage(damage);
                logger.log(attacker2.getName() + " (–ö–æ–º–∞–Ω–¥–∞ 2) –∞—Ç–∞–∫—É—î " +
                        target2.getName() + " (–ö–æ–º–∞–Ω–¥–∞ 1) —ñ –Ω–∞–Ω–æ—Å–∏—Ç—å " + damage + " —à–∫–æ–¥–∏");
                logger.log(target2.getName() + " HP: " + target2.getHealth() + "/" + target2.getMaxHealth());

                if (!target2.isAlive()) {
                    logger.log(target2.getName() + " –∑–Ω–∏—â–µ–Ω–∏–π!");
                }
            }

            if (!hasAliveDroids(team1)) {
                logger.log("\nüèÜ –ü–µ—Ä–µ–º–æ–≥–ª–∞ –ö–æ–º–∞–Ω–¥–∞ 2!");
                break;
            }

            logger.log("");
            round++;
        }

        return logger;
    }

    private boolean hasAliveDroids(List<Droid> team) {
        return team.stream().anyMatch(Droid::isAlive);
    }

    private Droid getRandomAliveDroid(List<Droid> team) {
        List<Droid> aliveDroids = team.stream()
                .filter(Droid::isAlive)
                .toList();

        if (aliveDroids.isEmpty()) {
            return null;
        }

        return aliveDroids.get(random.nextInt(aliveDroids.size()));
    }
}